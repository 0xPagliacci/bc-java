package org.bouncycastle.asn1.cms;


import java.io.ByteArrayInputStream;
import java.io.InputStream;

import org.bouncycastle.asn1.ASN1Choice;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.cmp.CertRepMessage;

/**
 * TaggedRequest is a wrapper for an object representing one of the following
 * types, it does not add any extra encoding.
 * <p>
 * TaggedRequest ::= CHOICE {
 * tcr               [0] TaggedCertificationRequest,
 * crm               [1] CertReqMsg,
 * orm               [2] SEQUENCE {
 * bodyPartID            BodyPartID,
 * requestMessageType    OBJECT IDENTIFIER,
 * requestMessageValue   ANY DEFINED BY requestMessageType
 * }
 * }
 */
public class TaggedRequest
    extends ASN1Object implements ASN1Choice
{
    private ASN1Object taggedRequest;

    public TaggedRequest getInstance(Object src) throws Exception
    {
        if (src instanceof ASN1InputStream)
        {
            ASN1Primitive enc = ((ASN1InputStream)src).readObject();
            return getInstance(enc);
        }
        else if (src instanceof byte[])
        {
            return getInstance(new ASN1InputStream(new ByteArrayInputStream((byte[])src)));
        }
        else if (src instanceof InputStream)
        {
            return getInstance(new ASN1InputStream((InputStream)src));
        }
        else if (src instanceof CertRepMessage)
        {
            return new TaggedRequest((ASN1Object)src);
        }
        else if (src instanceof ASN1Sequence)
        {

            ASN1Sequence seq = (ASN1Sequence)src;
            if (seq.getObjectAt(0) instanceof ASN1Integer &&
                seq.getObjectAt(1) instanceof ASN1ObjectIdentifier &&
                seq.getObjectAt(2) instanceof ASN1Encodable)
            {
                return new TaggedRequest(seq);
            }
        }
        throw new IllegalArgumentException("src must be byte[],ASN1InputStream, InputStream, CertRespMessage or ASN1Sequence matching the spec.");

    }

    private TaggedRequest(ASN1Object body)
    {



        this.taggedRequest = body;
    }


    public ASN1Primitive toASN1Primitive()
    {
        return taggedRequest.toASN1Primitive();
    }
}
